generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]
}

model User {
  id               Int          @id @default(autoincrement())
  fullName         String?
  email            String       @unique
  password         String
  phoneNumber      String?
  roleId           Int
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  profilePhoto     String?
  twoFactorEnabled Boolean      @default(false)
  twoFactorSecret  String?
  billingInfo      BillingInfo?
  role             Role         @relation(fields: [roleId], references: [id])
}

model BillingInfo {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  address     String
  city        String
  postalCode  String
  country     String
  billingName String?
  vatNumber   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model Utilisateur {
  id_utilisateur        Int                     @id @default(autoincrement())
  nom_utilisateur       String                  @unique
  mot_de_passe          String
  email                 String                  @unique
  role                  RoleUtilisateur
  fournisseur_auth      String?
  id_auth_externe       String?
  supprime_le           DateTime?
  activites             ActiviteUtilisateur[]
  client                Client?
  depenses              Depense[]
  favoris               Favori[]
  journaux_chatbot      JournalChatbot[]
  journal_modifications JournalModifications[]
  notifications         Notification[]
  personnel             Personnel?
  preferences           PreferenceUtilisateur[]

  @@index([email])
}

model Client {
  id_client              Int             @id @default(autoincrement())
  id_utilisateur         Int             @unique
  prenom                 String
  nom                    String
  telephone              String?
  statut_membre          String?
  consentement_marketing Boolean         @default(false)
  supprime_le            DateTime?
  utilisateur            Utilisateur     @relation(fields: [id_utilisateur], references: [id_utilisateur])
  fidelite               Fidelite?
  reservations           Reservation[]
  ticket_supports        TicketSupport[] @relation("ClientTickets")
  demandesCourse         DemandeCourse[] // une relation 1:N

  @@index([id_utilisateur])
}

model Personnel {
  id_personnel     Int             @id @default(autoincrement())
  id_utilisateur   Int             @unique
  prenom           String
  nom              String
  poste            String?
  date_embauche    DateTime?
  utilisateur      Utilisateur     @relation(fields: [id_utilisateur], references: [id_utilisateur])
  tickets_assigned TicketSupport[] @relation("PersonnelTickets")
  trajets          Trajet[] // une relation 1:N
}

model Chambre {
  id_chambre        Int                   @id @default(autoincrement())
  numero_chambre    String
  type_chambre      String
  prix_par_nuit     Decimal               @db.Decimal(10, 2)
  etat              EtatChambre
  description       String?
  date_modification DateTime?
  modifie_par       Int?
  equipements       ChambresEquipements[]
  favoris           Favori[]
  historique_prix   HistoriquePrix[]
  maintenances      Maintenance[]
  medias            Media[]
  reservations      ReservationsChambre[]
}

model JournalModifications {
  id_journal     Int         @id @default(autoincrement())
  id_utilisateur Int
  type_ressource String
  id_ressource   Int
  action         String
  details        Json?
  date           DateTime    @default(now())
  utilisateur    Utilisateur @relation(fields: [id_utilisateur], references: [id_utilisateur])
}

model Equipement {
  id_equipement Int                   @id @default(autoincrement())
  nom           String
  chambres      ChambresEquipements[]
}

model ChambresEquipements {
  id_chambre    Int
  id_equipement Int
  chambre       Chambre    @relation(fields: [id_chambre], references: [id_chambre])
  equipement    Equipement @relation(fields: [id_equipement], references: [id_equipement])

  @@id([id_chambre, id_equipement])
}

model Facture {
  id_facture     Int         @id @default(autoincrement())
  id_reservation Int
  montant_total  Decimal     @db.Decimal(10, 2)
  date_creation  DateTime    @default(now())
  date_envoi     DateTime?
  date_paiement  DateTime?
  etat           String      @default("en_attente")
  details        Json?
  notes          String?
  reservation    Reservation @relation(fields: [id_reservation], references: [id_reservation])

  @@index([id_reservation])
}

model Reservation {
  id_reservation         Int                          @id @default(autoincrement())
  id_client              Int
  date_reservation       DateTime                     @default(now())
  etat                   EtatReservation
  prix_total             Decimal?                     @db.Decimal(10, 2)
  etat_paiement          EtatPaiement?
  source_reservation     String?
  id_reservation_externe String?
  supprime_le            DateTime?
  avis                   Avis?
  factures               Facture[]
  paiements              Paiement[]
  client                 Client                       @relation(fields: [id_client], references: [id_client])
  chambres               ReservationsChambre[]
  services               ReservationsServices[]
  services_locaux        ReservationsServicesLocaux[]

  @@index([id_client])
}

model ReservationsChambre {
  id_reservation Int
  id_chambre     Int
  date_arrivee   DateTime
  date_depart    DateTime
  chambre        Chambre     @relation(fields: [id_chambre], references: [id_chambre])
  reservation    Reservation @relation(fields: [id_reservation], references: [id_reservation])

  @@id([id_reservation, id_chambre])
  @@index([date_arrivee])
  @@index([date_depart])
}

model Service {
  id_service   Int                    @id @default(autoincrement())
  nom          String
  description  String?
  prix         Decimal                @db.Decimal(10, 2)
  reservations ReservationsServices[]
}

model ReservationsServices {
  id_reservation Int
  id_service     Int
  date_demande   DateTime
  quantite       Int         @default(1)
  reservation    Reservation @relation(fields: [id_reservation], references: [id_reservation])
  service        Service     @relation(fields: [id_service], references: [id_service])

  @@id([id_reservation, id_service, date_demande])
}

model Paiement {
  id_paiement           Int          @id @default(autoincrement())
  id_reservation        Int
  montant               Decimal      @db.Decimal(10, 2)
  methode_paiement      String?
  date_transaction      DateTime     @default(now())
  etat                  EtatPaiement
  reference_transaction String?
  numero_echeance       Int?
  total_echeances       Int?
  notes                 String?
  date_echeance         DateTime?
  reservation           Reservation  @relation(fields: [id_reservation], references: [id_reservation])

  @@index([id_reservation])
}

model Avis {
  id_avis        Int         @id @default(autoincrement())
  id_reservation Int         @unique
  note           Int?
  commentaire    String?
  date_avis      DateTime    @default(now())
  reservation    Reservation @relation(fields: [id_reservation], references: [id_reservation])

  @@index([id_reservation])
}

model Media {
  id_media    Int       @id @default(autoincrement())
  id_chambre  Int
  type_media  TypeMedia
  url         String
  titre       String?
  description String?
  chambre     Chambre   @relation(fields: [id_chambre], references: [id_chambre])

  @@index([id_chambre])
}

model Fidelite {
  id_fidelite          Int                   @id @default(autoincrement())
  id_client            Int                   @unique
  solde_points         Int                   @default(0)
  derniere_mise_a_jour DateTime              @default(now())
  echanges             EchangeFidelite[]
  client               Client                @relation(fields: [id_client], references: [id_client])
  transactions         TransactionFidelite[]

  @@index([id_client])
}

model TransactionFidelite {
  id_transaction    Int      @id @default(autoincrement())
  id_fidelite       Int
  changement_points Int
  raison            String?
  date_transaction  DateTime @default(now())
  fidelite          Fidelite @relation(fields: [id_fidelite], references: [id_fidelite])
}

model ServiceLocal {
  id_service   Int                          @id @default(autoincrement())
  nom          String
  description  String?
  contact      String?
  categorie    String?
  reservations ReservationsServicesLocaux[]
}

model PreferenceUtilisateur {
  id_utilisateur  Int
  type_preference String
  valeur          String?
  utilisateur     Utilisateur @relation(fields: [id_utilisateur], references: [id_utilisateur])

  @@id([id_utilisateur, type_preference])
}

model Notification {
  id_notification Int         @id @default(autoincrement())
  id_utilisateur  Int
  type            String
  contenu         String?
  etat            String
  envoye_le       DateTime    @default(now())
  utilisateur     Utilisateur @relation(fields: [id_utilisateur], references: [id_utilisateur])
}

model JournalChatbot {
  id_journal     Int         @id @default(autoincrement())
  id_utilisateur Int
  requete        String?
  reponse        String?
  horodatage     DateTime    @default(now())
  utilisateur    Utilisateur @relation(fields: [id_utilisateur], references: [id_utilisateur])
}

model HistoriquePrix {
  id_prix      Int      @id @default(autoincrement())
  id_chambre   Int
  ancien_prix  Decimal? @db.Decimal(10, 2)
  nouveau_prix Decimal  @db.Decimal(10, 2)
  modifie_par  String?
  modifie_le   DateTime @default(now())
  chambre      Chambre  @relation(fields: [id_chambre], references: [id_chambre])
}

model ReservationsServicesLocaux {
  id_reservation_service Int          @id @default(autoincrement())
  id_reservation         Int
  id_service_local       Int
  heure_reservation      DateTime?
  etat                   String?
  reservation            Reservation  @relation(fields: [id_reservation], references: [id_reservation])
  service_local          ServiceLocal @relation(fields: [id_service_local], references: [id_service])
}

model ActiviteUtilisateur {
  id_activite    Int         @id @default(autoincrement())
  id_utilisateur Int
  action         String
  details        Json?
  horodatage     DateTime    @default(now())
  utilisateur    Utilisateur @relation(fields: [id_utilisateur], references: [id_utilisateur])

  @@index([id_utilisateur])
}

model CatalogueRecompense {
  id_recompense Int               @id @default(autoincrement())
  nom           String
  points_requis Int
  description   String?
  echanges      EchangeFidelite[]
}

model EchangeFidelite {
  id_echange      Int                 @id @default(autoincrement())
  id_fidelite     Int
  id_recompense   Int
  points_utilises Int
  date_echange    DateTime            @default(now())
  fidelite        Fidelite            @relation(fields: [id_fidelite], references: [id_fidelite])
  recompense      CatalogueRecompense @relation(fields: [id_recompense], references: [id_recompense])
}

model ConfigurationSysteme {
  id        Int      @id @default(autoincrement())
  cle       String   @unique
  valeur    String
  categorie String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Depense {
  id_depense        Int              @id @default(autoincrement())
  id_utilisateur    Int
  montant           Decimal          @db.Decimal(10, 2)
  categorie         CategorieDepense
  date_creation     DateTime         @default(now())
  date_modification DateTime?
  date_suppression  DateTime?
  description       String?
  utilisateur       Utilisateur      @relation(fields: [id_utilisateur], references: [id_utilisateur])

  @@index([date_creation])
  @@index([categorie])
}

model Favori {
  id_favori      Int         @id @default(autoincrement())
  id_utilisateur Int
  id_chambre     Int
  ajoute_le      DateTime    @default(now())
  chambre        Chambre     @relation(fields: [id_chambre], references: [id_chambre])
  utilisateur    Utilisateur @relation(fields: [id_utilisateur], references: [id_utilisateur])

  @@unique([id_utilisateur, id_chambre])
}

model Maintenance {
  id_maintenance Int      @id @default(autoincrement())
  id_chambre     Int
  description    String
  date           DateTime @default(now())
  chambre        Chambre  @relation(fields: [id_chambre], references: [id_chambre])

  @@index([id_chambre])
}

model TicketSupport {
  id_ticket      Int                 @id @default(autoincrement())
  sujet          String
  type           TypeTicketSupport
  statut         StatutTicketSupport @default(en_attente)
  description    String
  date_creation  DateTime            @default(now())
  id_client      Int
  id_personnel   Int?
  emails_envoyes EmailSupport[]
  client         Client              @relation("ClientTickets", fields: [id_client], references: [id_client])
  personnel      Personnel?          @relation("PersonnelTickets", fields: [id_personnel], references: [id_personnel])
}

model EmailSupport {
  id_email           Int           @id @default(autoincrement())
  id_ticket          Int
  email_client       String
  email_destinataire String
  sujet              String
  message            String
  date_envoi         DateTime      @default(now())
  ticket             TicketSupport @relation(fields: [id_ticket], references: [id_ticket])
}

enum RoleUtilisateur {
  client
  personnel
  administrateur
}

enum EtatChambre {
  disponible
  occupee
  maintenance
}

enum EtatReservation {
  en_attente
  confirmee
  annulee
  enregistree
  depart
}

enum EtatPaiement {
  en_attente
  complete
  echoue
  rembourse
}

enum TypeMedia {
  image
  video
  visite_360
  apercu_ar
}

enum CategorieDepense {
  maintenance
  personnel
  services
  transport
  communication
  logiciel
  marketing
  admin
  equipement
  autre
}

enum TypeTicketSupport {
  technique
  service
  autre
}

enum StatutTicketSupport {
  en_attente
  en_cours
  resolu
  ferme
}

model DemandeCourse {
  id_demande_course Int                 @id @default(autoincrement())
  lieu_depart       String
  lieu_arrivee      String
  date_demande      DateTime            @default(now())
  statut            StatutDemandeCourse @default(en_attente)

  id_client Int
  client    Client @relation(fields: [id_client], references: [id_client])

  trajet Trajet?

  @@index([id_client])
}

model Trajet {
  id_trajet            Int          @id @default(autoincrement())
  date_prise_en_charge DateTime
  date_depose          DateTime
  statut               StatutTrajet @default(en_attente)

  id_personnel Int
  personnel    Personnel @relation(fields: [id_personnel], references: [id_personnel])

  id_demande_course Int           @unique
  demandeCourse     DemandeCourse @relation(fields: [id_demande_course], references: [id_demande_course])

  @@index([id_personnel])
}

enum StatutDemandeCourse {
  en_attente
  acceptee
  refusee
  annulee
}

enum StatutTrajet {
  en_attente
  en_cours
  termine
}
